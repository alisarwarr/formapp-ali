{"version":3,"sources":["MUIStepper.tsx","FormikForm.tsx","FormikStep.tsx","Main.tsx","App.tsx","index.tsx"],"names":["MUIStepper","step","childrenArray","completed","Stepper","alternativeLabel","activeStep","map","x","index","Step","StepLabel","props","label","FormikForm","children","React","Children","toArray","useState","setStep","currentChild","setCompleted","theme","useTheme","screen335","useMediaQuery","validationSchema","onSubmit","values","helpers","a","length","isSubmitting","autoComplete","className","Button","variant","color","palette","type","size","onClick","disabled","startIcon","CircularProgress","FormikStep","process","time","Promise","acc","setTimeout","useStyles","makeStyles","card","width","height","display","justifyContent","alignItems","marginTop","Main","classes","cardAnimation","useWebAnimations","backInLeft","Card","classnames","ref","CardContent","initialValues","firstName","lastName","email","millionarie","money","address","description","agreeTnC","console","log","object","string","max","min","required","Box","paddingBottom","fullWidth","name","component","TextField","CheckboxWithLabel","Label","mixed","when","is","then","number","otherwise","boolean","oneOf","app","flexDirection","position","top","bottom","overflow","themechip","App","darkMode","setDarkMode","createMuiTheme","background","paper","overrides","MuiStepIcon","root","btnAnimation","backInRight","chipAnimation","fadeIn","screen400","ThemeProvider","style","backgroundColor","CardActionArea","getAnimation","play","Chip","icon","Switch","checked","Typography","id","marginLeft","fontWeight","fontStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29882ff5.chunk.js","sourcesContent":["import React from 'react';\nimport { Stepper, Step, StepLabel } from '@material-ui/core';\n\ninterface StepperProps {\n    step          : number;\n    childrenArray : any[];\n    completed     : boolean;\n}\n\nfunction MUIStepper({ step, childrenArray, completed }: StepperProps) {\n    return (\n        <Stepper alternativeLabel activeStep={step}>\n            {\n                childrenArray.map((x, index) => (\n                    <Step key={index} completed={(step > index) || completed}>\n                        <StepLabel> {x.props.label} </StepLabel>\n                    </Step>\n                ))\n            }\n        </Stepper>\n    )\n}\n\nexport default MUIStepper;","import React, { useState } from 'react';\nimport { Formik, Form, FormikConfig, FormikValues } from 'formik';\nimport { Button, CircularProgress } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { FormikStepProps } from './FormikStep';\nimport MUIStepper from './MUIStepper';\n\nfunction FormikForm({ children, ...props }: FormikConfig<FormikValues>) {\n    const childrenArray = React.Children.toArray(children);          //saray 'children' ko array mein returns karega\n    const [ step, setStep ] = useState(0);\n    const currentChild = childrenArray[step] as React.ReactElement<FormikStepProps>;\n    //for form complete\n    const [ completed, setCompleted ] = useState(false);\n\n    const theme = useTheme();\n    const screen335 = useMediaQuery('(max-width: 335px)');\n\n    return (\n        <Formik\n            {...props}                                               //props hai whole form (Formik) ka\n            validationSchema={currentChild.props.validationSchema}   //jo child ayega us waqt sirf uski validation dekhenge\n            onSubmit={async (values, helpers) => {\n                if(step === childrenArray.length -1) {\n                    await props.onSubmit(values, helpers);           //onSubmit puray form ka hai last waale step pe call karenge\n                    setCompleted(true);\n                }\n                else {\n                    setStep(x => x + 1);\n                }\n            }}\n        >\n            {({ isSubmitting }) => (\n                <Form autoComplete=\"off\">                            {/* autoComplete=\"off\" for history off */}\n                    <div className=\"box\">\n                        <MUIStepper step={step} childrenArray={childrenArray} completed={completed}/>\n                    </div>\n                    {\n                        currentChild\n                    }\n                    {\n                        step > 0 &&\n                            <Button\n                                variant=\"contained\"\n                                color={theme.palette.type === \"light\" ? \"primary\" : \"secondary\"}\n                                size={screen335 ? \"small\" : \"medium\"}\n                                onClick={() => setStep(x => (x - 1))}\n                                disabled={isSubmitting}\n                            >\n                                BACK\n                            </Button>\n                    }\n                    <Button\n                        variant=\"contained\"\n                        color={theme.palette.type === \"light\" ? \"primary\" : \"secondary\"}\n                        size={screen335 ? \"small\" : \"medium\"}\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                        startIcon={isSubmitting ? <CircularProgress size=\"1rem\"/> : null}\n                    >\n                        {\n                            isSubmitting ? \"SUMITTING\" :\n                            step === childrenArray.length -1 ? \"SUBMIT\" : \"NEXT\"\n                        }\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nexport default FormikForm;","import React from 'react';\nimport { FormikConfig, FormikValues } from 'formik';\n                    //'pick' ko use karne se sir us k baad aane wale ko pakrega jese 'children'\nexport interface FormikStepProps extends Pick<FormikConfig<FormikValues>, 'children' | 'validationSchema'> {\n    label: string;  //ye label khud se crate kia hai\n}\n\nfunction FormikStep({ children }: FormikStepProps) {\n    return (\n        <>\n            {\n                children\n            }\n        </>\n    )\n}\n\nexport default FormikStep;","import React from 'react';\nimport { Card, CardContent, Box } from '@material-ui/core';\nimport { Field, ErrorMessage } from 'formik';\nimport { TextField, CheckboxWithLabel } from 'formik-material-ui';\nimport { object, string, mixed, number, boolean } from 'yup';\nimport useWebAnimations, { backInLeft } from '@wellyshen/use-web-animations';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport FormikForm from './FormikForm';\nimport FormikStep from './FormikStep';\n\nconst process = (time: number) => new Promise(acc => setTimeout(acc, time));\n\nconst useStyles = makeStyles({\n    card: {\n       width: \"23.5rem\",\n       height: \"34rem\",\n       display: \"flex\",\n       justifyContent: \"center\",\n       alignItems: \"center\",\n       marginTop: \"1.15rem\"\n    }\n})\n\nfunction Main() {\n    const classes = useStyles();\n    const theme = useTheme();\n    \n    const cardAnimation = useWebAnimations({ ...backInLeft });\n\n    return (\n        <Card className={classnames(classes.card, \"card\")} ref={cardAnimation.ref}>\n            <CardContent>\n                <FormikForm\n                    initialValues={{\n                        firstName    : \"\",\n                        lastName     : \"\",\n                        email        : \"\",\n                        millionarie  : false,\n                        money        : 0,\n                        address      : \"\",\n                        description  : \"\",\n                        agreeTnC     : false,\n                    }}\n                    onSubmit={async (values) => {\n                        await process(3000);\n                        console.log(\"values\", values);\n                    }}\n                >\n                    <FormikStep\n                        validationSchema={\n                            object({\n                                firstName : string()\n                                .max(30, 'Must be atmost 30 character')\n                                .min(2, 'Must have atleast 2 characters')\n                                .required('Must be filled'),\n                                lastName  : string()\n                                .max(30, 'Must be atmost 30 character')\n                                .min(2, 'Must have atleast 2 characters')\n                                .required('Must be filled'),\n                                email     : string()\n                                .email('Must be a valid email')\n                                .max(30, 'Must be atmost 30 character')\n                                .min(5, 'Must be atleast 5 characters')\n                                .required('Must be filled'),\n                            })\n                        }    \n                        label=\"Personal Data\"\n                    >\n                        <Box paddingBottom={1}>\n                            <Field fullWidth name='firstName' component={TextField} label=\"First Name\"/>\n                        </Box>\n\n                        <Box paddingBottom={1}>\n                            <Field fullWidth name='lastName' component={TextField} label=\"Last Name\"/>\n                        </Box>\n                        \n                        <Box paddingBottom={1}>\n                            <Field fullWidth name='email' component={TextField} label=\"Email\"/>\n                        </Box>\n\n                        <Box paddingBottom={1}>\n                            <Field name='millionarie' type=\"checkbox\" component={CheckboxWithLabel} Label={{label: \"I'm a Millionarie\"}}\n                                   color={theme.palette.type === \"light\" ? \"primary\" : \"secondary\"}\n                            />\n                        </Box>\n                    </FormikStep>\n\n\n                    <FormikStep\n                        validationSchema={\n                            object({\n                                money: mixed().when(\"millionarie\", {\n                                    is: true,\n                                    then: number().required('Must be filled').min(1_000_000, `You say you're a millionarie so put atleast 1 million`),\n                                    otherwise: number().min(1, 'Atleast some amount').required('Must be filled')\n                                }),\n                                address : string()\n                                .max(50, 'Must be atmost 50 character')\n                                .min(10, 'Must be atleast 10 characters')\n                                .required('Must be filled'),\n                            })\n                        }\n                        label=\"Bank Account\"\n                    >\n                        <Box paddingBottom={2}>\n                            <Field fullWidth name='money' type=\"number\" component={TextField} label=\"Money\"/>\n                        </Box>\n\n                        <Box paddingBottom={2}>\n                            <Field fullWidth name='address' component={TextField} label=\"Address\"/>\n                        </Box>\n                    </FormikStep>\n\n\n                    <FormikStep\n                        validationSchema={\n                            object({\n                                description: string()\n                                .min(10, 'Must be greater than 10 character')\n                                .max(25, 'Must be shorter than 25 character')\n                                .required('Must be filled'),\n                                agreeTnC: boolean()\n                                .oneOf([true], 'Must be agree to terms & conditions')\n                            })\n                        }\n                        label=\"More Info\"\n                    >\n                        <Box paddingBottom={2}>\n                            <Field fullWidth name='description' component={TextField} label=\"Description\"/>\n                        </Box>\n\n                        <Box paddingBottom={2}>\n                            <Field name='agreeTnC' type=\"checkbox\" component={CheckboxWithLabel} Label={{label: \"I agree to terms & conditions\"}}\n                                   color={theme.palette.type === \"light\" ? \"primary\" : \"secondary\"}\n                            />\n                            <ErrorMessage name='agreeTnC' component=\"p\" className={classnames(\"agreeTnC\", \"TnCred\")}/>\n                        </Box>\n                    </FormikStep>\n                </FormikForm>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default Main;","import React, { useState } from 'react';\nimport Main from './Main';\nimport { Typography, Chip, Switch, CardActionArea } from '@material-ui/core';\nimport Brightness4SharpIcon from '@material-ui/icons/Brightness4Sharp';\nimport { makeStyles, createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport useWebAnimations, { backInRight, fadeIn } from '@wellyshen/use-web-animations';\n\nconst useStyles = makeStyles({\n    app: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n        //for cover entire screen of any size\n        height: \"100%\",\n        width: \"100%\",\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        overflow: \"hidden\"\n        //for cover entire screen of any size\n    },\n    themechip: {\n        display: \"flex\",\n        alignItems: \"center\"\n    }\n})\n\nfunction App() {\n    const [ darkMode, setDarkMode ] = useState(true);\n    const theme = createMuiTheme({\n        palette: {\n            type: darkMode ? \"dark\" : \"light\",\n            background: {        //black     //white\n                paper: darkMode ? \"#000000\" : \"#FFFFFF\"\n            }\n        },\n        overrides: {\n            MuiStepIcon: {\n                root: {\n                    '&$completed': {\n                        color: darkMode ? 'rgba(214, 69, 65, 1)' : 'rgba(83, 51, 237, 1)'\n                    },\n                    '&$active': {\n                        color: darkMode ? 'rgba(214, 69, 65, 1)' : 'rgba(83, 51, 237, 1)'\n                    }\n                }\n            }\n        }\n    })\n\n    const btnAnimation = useWebAnimations({ ...backInRight });\n    const chipAnimation = useWebAnimations({ ...fadeIn });\n\n    const classes = useStyles();\n    const screen400 = useMediaQuery('(max-width: 400px)');\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div\n                className={classes.app}\n                style={darkMode ?\n                    { backgroundColor: \"rgba(214, 69, 65, 1)\" } : { backgroundColor: \"rgba(83, 51, 237, 1)\" }\n                }\n            >\n                <Main\n                />\n                <div\n                    onClick={() => setDarkMode(x => !x)}\n                    ref={btnAnimation.ref as React.RefObject<HTMLDivElement>}\n                >\n                    <CardActionArea\n                        className=\"chip\"\n                        ref={chipAnimation.ref as React.RefObject<HTMLButtonElement>}\n                        onClick={() => chipAnimation?.getAnimation()?.play()}\n                    >\n                        <Chip\n                            icon={\n                                <Switch\n                                    checked={!darkMode}\n                                    style={{ color : darkMode ? \"#000000\" : \"#FFFFFF\" }}\n                                    size={screen400 ? \"small\" : \"medium\"}\n                                    className=\"hideon335\"\n                                />\n                            }\n                            label={\n                                <Typography className={classes.themechip} style={{ color : darkMode ? \"#000000\" : \"#FFFFFF\" }}>\n                                    <Brightness4SharpIcon id=\"icon\"/>\n                                    <span\n                                        style={{ marginLeft: 7, fontWeight: \"bold\", fontStyle: \"italic\" }}\n                                        className=\"hideon275\"\n                                    > theme </span>\n                                </Typography>\n                            }\n                            className=\"fade_effect\"\n                            color= {darkMode ? \"secondary\" : \"primary\"}\n                        />\n                    </CardActionArea>\n                    <span className=\"hideabove275\"style={{ color : darkMode ? \"#000000\" : \"#FFFFFF\" }}> theme </span>\n                </div>\n            </div>\n        </ThemeProvider>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/Style.scss';\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n"],"sourceRoot":""}